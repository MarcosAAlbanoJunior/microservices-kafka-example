services:
  kafka-1:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=6a8256f8-5a3f-4c86-9368-ad487ad4b3d2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9090,EXTERNAL://${HOSTNAME:-localhost}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - C:/kafka/volumes/volumes/server-1:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka-1:9090 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-2:
    image: bitnami/kafka:latest
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=6a8256f8-5a3f-4c86-9368-ad487ad4b3d2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9090,EXTERNAL://${HOSTNAME:-localhost}:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - C:/kafka/volumes/volumes/server-2:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka-2:9090 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-3:
    image: bitnami/kafka:latest
    ports:
      - "9096:9096"
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=6a8256f8-5a3f-4c86-9368-ad487ad4b3d2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9090,EXTERNAL://${HOSTNAME:-localhost}:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - C:/kafka/volumes/server-3:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka-3:9090 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-cluster-ready:
    image: bitnami/kafka:latest
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üîç Verificando se todos os brokers est√£o no cluster...'
        
        until [ $$(kafka-broker-api-versions.sh --bootstrap-server kafka-1:9090,kafka-2:9090,kafka-3:9090 2>/dev/null | grep -c 'kafka-[1-3]:9090') -eq 3 ]; do
          echo '‚è≥ Aguardando cluster completo...'
          sleep 5
        done
        
        echo '‚úÖ Cluster Kafka est√° pronto!'
        echo 'üìä Brokers dispon√≠veis:'
        kafka-broker-api-versions.sh --bootstrap-server kafka-1:9090,kafka-2:9090,kafka-3:9090
      "
    restart: "no"

  # --- MICROSERVI√áOS ---

  products-microservice:
    build:
      context: ./products-microservice 
      dockerfile: Dockerfile 
    image: products-microservice:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      kafka-cluster-ready:
        condition: service_completed_successfully
    ports:
      - "8081:8081"

  email-notification-microservice:
    build:
      context: ./email-notification-microservice
      dockerfile: Dockerfile
    image: email-notification-microservice:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      kafka-cluster-ready:
        condition: service_completed_successfully
    ports:
      - "8082:8082"